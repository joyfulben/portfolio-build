{"version":3,"sources":["components/Projects.js","components/AboutMe.js","components/Contact.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Projects","useState","isShown","setIsShown","className","onMouseEnter","onMouseLeave","href","AboutMe","state","showResume","toggleShowResume","bind","this","setState","src","alt","onClick","data","type","width","height","Component","Contact","Home","App","showEmail","to","exact","path","component","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+QAkBeA,MAhBf,WAAqB,IAAD,EACYC,oBAAS,GADrB,mBACXC,EADW,KACFC,EADE,KAElB,OACE,6BACE,yBAAKC,UAAU,oBACX,uBACAC,aAAc,kBAAMF,GAAW,IAC/BG,aAAc,kBAAMH,GAAW,IAC/BI,KAAK,mCAAkC,yBAAKH,UAAU,0BAA0BF,GAC9E,wBAAIE,UAAU,qBAAd,yBAGN,uBAAGA,UAAU,cAAb,qSCZeI,E,kDACnB,aAAc,IAAD,8BACX,gBACKC,MAAQ,CACXC,YAAY,GAEd,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBALb,E,+DAQXC,KAAKC,SAAS,CACZJ,YAAaG,KAAKJ,MAAMC,e,+BAI1B,OACE,yBAAKN,UAAU,SACb,kDACA,uBAAGG,KAAK,oCAAmC,yBAAKH,UAAU,WAAWW,IAAI,cAAcC,IAAK,MAC5F,6BACA,uBAAGZ,UAAU,aAAb,8IAAoK,6BAAK,6BAAzK,mUACA,6BACA,4BAAQA,UAAU,uBAAuBa,QAASJ,KAAKF,kBAAvD,oBACCE,KAAKJ,MAAMC,WACV,4BAAQQ,KAAK,cAAcC,KAAK,kBAAkBC,MAAM,MAAMC,OAAO,QAAQL,IAAI,iBACjF,U,GAxB2BM,aCAhBC,E,uKAIjB,OACE,yBAAKnB,UAAU,kBACb,uBAAGG,KAAK,6CAA4C,yBAAKH,UAAU,UAAUW,IAAI,2GAA2GC,IAAM,MAEhM,uBAAGZ,UAAU,gDAAb,c,GAR2BkB,aCAhBE,E,uKAEjB,OACE,6BACA,+C,GAJ4BF,aCKbG,E,kDACnB,aAAc,IAAD,8BACX,gBACKhB,MAAQ,CACXiB,WAAW,GAEb,EAAKA,UAAY,EAAKA,UAAUd,KAAf,gBALN,E,wDAQXC,KAAKC,SAAS,CACZY,WAAYb,KAAKJ,MAAMiB,c,+BAIzB,OACE,yBAAKtB,UAAU,OAKb,kBAAC,IAAD,KACE,6BACE,6BACE,yBAAKA,UAAU,OACb,kBAAC,IAAD,CAAMuB,GAAI,KAAV,QACA,kBAAC,IAAD,CAAMA,GAAI,aAAV,YACA,kBAAC,IAAD,CAAMA,GAAI,aAAV,aAEF,yBAAKvB,UAAU,kBACb,uBAAGG,KAAK,6CAA4C,yBAAKH,UAAU,UAAUW,IAAI,2GAA2GC,IAAM,MAClM,uBAAGT,KAAK,gCAA+B,yBAAKQ,IAAI,8DAItD,yBAAKX,UAAU,eACb,kBAAC,IAAD,CAAOwB,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAM,YAAYC,UAAW9B,IAC1C,kBAAC,IAAD,CAAO4B,OAAK,EAACC,KAAM,YAAYC,UAAWtB,IAC1C,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAM,WAAWC,UAAWP,Y,GAtCpBQ,IAAMT,WCKnBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.87ecfe1a.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nfunction Projects() {\n  const [isShown, setIsShown] = useState(false);\n  return (\n    <div>\n      <div className=\"capstone-project\">\n          <a\n          onMouseEnter={() => setIsShown(true)}\n          onMouseLeave={() => setIsShown(false)}\n          href=\"https://pv-system.herokuapp.com\"><div className=\"solar-system-optimizer\">{isShown && (\n            <h5 className=\"capstone-img-text\">Link to live site </h5>\n          )}</div></a>\n      </div>\n      <p className=\"solar-text\">This application uses a React.js frontend and ruby on rails backend. Utilizing an API from NREL, users are able to find photovoltaic system energy outputs based on location, system size, angle of panels and system losses. Additionally, users are able to sign up and save monthly outputs.</p>\n    </div>\n  )\n}\nexport default Projects;\n","import React, {Component} from 'react'\n\nexport default class AboutMe extends Component {\n  constructor(){\n    super()\n    this.state = {\n      showResume: false\n    }\n    this.toggleShowResume = this.toggleShowResume.bind(this)\n  }\n  toggleShowResume(){\n    this.setState({\n      showResume: !this.state.showResume\n    })\n  }\n  render() {\n    return (\n      <div className=\"about\">\n        <h4>Check out my blog!</h4>\n        <a href=\"https://medium.com/@benfishernow\"><img className=\"blog-pic\" src=\"My_Blog.png\" alt =\"\"/></a>\n        <hr/>\n        <p className=\"flow-text\">I am constantly looking for ways to make the world around me a better place. Software engineering is my freshest tool for doing just that. <br/><br/>I am looking to play my role in helping advance environmental awareness and having sustainable practices more easily available. Whether by saving my kitchen scraps for broth or developing an application that allows homeowners to estimate the cost of a photovoltaic system installation, I am here to help heal our world.</p>\n        <hr/>\n        <button className=\"resume-btn btn pulse\" onClick={this.toggleShowResume}>See Ben's Resume</button>\n        {this.state.showResume\n        ? <object data=\"/resume.pdf\" type=\"application/pdf\" width=\"90%\" height=\"600px\" alt=\"Ben's Resume\"/>\n        : null\n        }\n\n\n      </div>\n    )\n  }\n}\n","import React, {Component} from 'react'\n\nexport default class Contact extends Component {\n\n\n  render() {\n    return (\n      <div className=\"anchor-linkdin\">\n        <a href=\"https://www.linkedin.com/in/benfishernow/\"><img className=\"linkdin\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Linkedin_icon.svg/1200px-Linkedin_icon.svg.png\" alt = \"\"/></a>\n\n          <i className=\"blue-text text-darken-2 large material-icons\">email</i>\n\n\n      </div>\n    )\n  }\n}\n","import React, {Component} from 'react'\n\nexport default class Home extends Component {\n  render() {\n    return (\n      <div>\n      <h2>Ben's Page</h2>\n      </div>\n    )\n  }\n}\n","import React from 'react';\nimport {BrowserRouter as Router, Route, Link} from 'react-router-dom'\nimport Projects from './components/Projects'\nimport AboutMe from './components/AboutMe'\nimport Contact from './components/Contact'\nimport Home from './components/Home'\n\nexport default class App extends React.Component {\n  constructor(){\n    super()\n    this.state = {\n      showEmail: false\n    }\n    this.showEmail = this.showEmail.bind(this)\n  }\n  showEmail() {\n    this.setState({\n      showEmail: !this.state.showEmail\n    })\n  }\n  render() {\n    return(\n      <div className=\"all\">\n\n\n\n\n        <Router>\n          <div >\n            <nav >\n              <div className=\"nav\">\n                <Link to ='/'>Home</Link>\n                <Link to ='/projects'>Projects</Link>\n                <Link to ='/about_me'>About me</Link>\n              </div>\n              <div className=\"anchor-linkdin\">\n                <a href=\"https://www.linkedin.com/in/benfishernow/\"><img className=\"linkdin\" src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e9/Linkedin_icon.svg/1200px-Linkedin_icon.svg.png\" alt = \"\"/></a>\n                <a href=\"https://github.com/joyfulben\"><img src=\"https://avatars0.githubusercontent.com/u/9919?s=60&v=4\"/></a>\n\n              </div>\n            </nav>\n          <div className=\"main-center\">\n            <Route exact path='/' component={Home}/>\n            <Route exact path ='/projects' component={Projects} />\n            <Route exact path ='/about_me' component={AboutMe} />\n            <Route exact path ='/contact' component={Contact} />\n          </div>\n          </div>\n        </Router>\n\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}